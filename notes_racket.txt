###################################################################################################
# Week 1
###################################################################################################
- Racket is PREFIX, i.e. first write the procedure and then write its arguments
- extension for racket files: .rkt
- Edit/Preferences/Editing/Racket put ticks everywhere
- Shortcuts
    - Esc + p for using the previous input in interpreter window
    - Cntr + F5 for running the code in the text editor window
    - the two windows are independent, so feel free to test code in the interpreter window even if the code in the text editor window is incomplete
- IMPORTANT NOTE: DrRacket DOES NOT autosave.


- in Racket functions are (formally) called procedures
    - What is the difference between a function and a method?
        - the method is part of a class and hence has access to *this


- What is a predicate?
    A procedure that returns a boolean value.


- types of processes:
    - linearly recursive:
        - The result is stored in a recursive tail.
        - The recursive call is part of an expression.
    - linearly iterative:
        - The result is stored as a variable that is part of ANOTHER local procedure. Often the variable is named "result" and the procedure - "helper".
        - The recursive call is not part of an expression.
            - these processes are faster than the linearly recursive ones!


- What is a declaration and what is a definition?
    int add(const int x, const int y)       <-- declaration
    {                                       <-- definition
        return x + y;                       <-- definition
    }                                       <-- definition


- Comments:
    ; This is a one line comment
    #|
    This
    is
    a multiline comment.
    |#


- built-in data types
    - boolean: #t #f
    - numbers: 1, 1.5, 2+3i
    - strings: "hello"
    - Pairs: '(1 . 2)
    - Lists: '(1 2 3 4 5)
    - conventions for identifiers:
        - myProgram vs. my_program vs. my-program
        - predicate => suffix "?"


- procedures
    - display
        - prints something on console
        - (display "Hello, world!") -> Hello, world!
    - = 
        - use to check equality between numbers
        - (= 5 5) -> #t
        - (= 5 -5) -> #f
    - equal?
        - use when using = is not possible
        - (equal? "Hello" "He") -> #f
        - (equal? 5 "He") -> #f
    - boolean operators: not, and, or
        - (and #t #f) -> #f
        - (not #t) -> #f
    - /
        - division between numbers
        - (/ 10 5) -> 2
        - (/ 10.0 7.0) -> 1.4285714285714286
    - quotient
        - returns the quotient of the division
        - (quotient 10.0 7.0) -> 1.0
    - remainder
        - returns the remainder of the division
        - (remainder 123 10) -> 3
    - cond (analogous to "switch" in C++)
        (define (f x)
            (cond
                [(= x 10) (display "x is 10")]
                [(zero? (remainder x 2)) (display "x is not 10 but is even")]
                [else (display "x is not 10 and is not even")]       
            )
        )

        (f 10) -> x is 10
        (f 5) -> x is not 10 and is not even
        (f 6) -> x is not 10 but is even
    - expt
        - the power operator
        - (expt 2 10) -> 1024
    - min, max, +, -, *, <, <=, ...
        - NOTE: They work with more than two numbers also!
        - (max 1 2 3 4 5) -> 5
        - (<= 1 2 3 4 5) -> #t


- key words to watch out for in an exam
    - естествено
    - неотрицателно
    - неположително
    - положително
    - индекс, ...


- nested procedures
    - Will more than one procedure use it?
        - Yes => global
        - No => nested


- write the hello world procedure:

#lang racket    <--- Should always be there

(display "Hello, world!")
^                       ^
|                       |
|                       |
Do not forget the brackets!

- make a Facebook chat (FP_CS_21-22)


###################################################################################################
# Week 2
###################################################################################################
For home:
	WARNING:
		Getting a “Yes” DOES NOT mean getting a bonus.

Import a library:
	- (require math/number-theory) ; API: https://docs.racket-lang.org/math/number-theory.html
	- (require racket/trace)

Procedures:
	- (divides? y x): Whether y divides x with remainder=0.
		- (divides? 5 25) -> #t
		- (divides? 5 19) -> #f
		- (divides? 10 66) -> #f ; same as (= (remainder 66 10) 0)
		- (divides? 10 100) -> #t
	- (prime? x): Whether x is a prime number.
		- (prime? 7) -> #t
	- (even? x): Whether x is an even number.
		- (even? 7) -> #f
	- (odd? x): Whether x is an odd number.
		- (odd? 7) -> #t
	- (trace <f-name>): See what calculations happen where. VERY USEFUL FOR DEBUGGING!

